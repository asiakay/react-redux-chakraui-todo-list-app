{"version":3,"sources":["constants.js","redux/reducers/visibilityFilter.js","redux/actionTypes.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store.js","redux/actions.js","components/AddTodo.js","components/Todo.js","redux/selectors.js","components/TodoList.js","components/VisibilityFilters.js","TodoApp.js","index.js"],"names":["VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","initialState","visibilityFilter","state","action","type","payload","filter","allIds","byIds","combineReducers","todos","id","content","completed","createStore","rootReducer","nextTodoId","AddTodo","props","updateInput","input","setState","handleAddTodo","addTodo","bg","w","p","color","textTransform","onChange","e","target","value","this","className","size","onClick","React","Component","connect","toggleTodo","todo","cx","getTodosState","store","getTodos","getTodoList","map","getTodoById","allTodos","getTodosByVisibilityFilter","length","index","key","activeFilter","setFilter","Object","keys","filterKey","currentFilter","customTheme","extendTheme","config","useSystemColorMode","initialColorMode","TodoApp","theme","width","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3d084b62.chunk.js","sourcesContent":["export const VISIBILITY_FILTERS = {\n    ALL: \"all\",\n    COMPLETED: \"completed\",\n    INCOMPLETE: 'incomplete'\n};","import { SET_FILTER } from \"../actionTypes\";\nimport { VISIBILITY_FILTERS } from \"../../constants\";\n\nconst initialState = VISIBILITY_FILTERS.ALL;\n\nconst visibilityFilter = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_FILTER: {\n      return action.payload.filter;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default visibilityFilter;\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const SET_FILTER = \"SET_FILTER\";\n","import { ADD_TODO, TOGGLE_TODO } from \"../actionTypes\";\n\nconst initialState = {\n  allIds: [],\n  byIds: {}\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO: {\n      const { id, content } = action.payload;\n      return {\n        ...state,\n        allIds: [...state.allIds, id],\n        byIds: {\n          ...state.byIds,\n          [id]: {\n            content,\n            completed: false\n          }\n        }\n      };\n    }\n    case TOGGLE_TODO: {\n      const { id } = action.payload;\n      return {\n        ...state,\n        byIds: {\n          ...state.byIds,\n          [id]: {\n            ...state.byIds[id],\n            completed: !state.byIds[id].completed\n          }\n        }\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport visibilityFilter from './visibilityFilter';\nimport todos from './todos';\n\nexport default combineReducers({ todos, visibilityFilter });","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"./actionTypes\";\n\nlet nextTodoId = 0;\n\nexport const addTodo = content => ({\n  type: ADD_TODO,\n  payload: {\n    id: ++nextTodoId,\n    content\n  }\n});\n\nexport const toggleTodo = id => ({\n  type: TOGGLE_TODO,\n  payload: { id }\n});\n\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addTodo } from \"../redux/actions\";\n\nimport { Box, Input, Button, Center } from \"@chakra-ui/react\"\n\n\nclass AddTodo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { input: \"\" };\n  }\n\n  updateInput = input => {\n    this.setState({ input });\n  };\n\n  handleAddTodo = () => {\n    this.props.addTodo(this.state.input);\n    this.setState({ input: \"\" });\n  };\n\n  render() {\n    return (\n      <div>\n        <Center>\n        <Box \n          bg=\"\" \n          w=\"50%\" \n          p={10} \n          color=\"white\"\n          textTransform=\"uppercase\"\n\n          >\n        <Input\n          onChange={e => this.updateInput(e.target.value)}\n          value={this.state.input}\n        />\n       <Center> <Button \n          className=\"add-todo\"\n          size=\"xs\" \n          onClick={this.handleAddTodo}>\n          Add Todo\n        </Button>\n        </Center>\n        </Box>\n        </Center>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { addTodo }\n)(AddTodo);\n// export default AddTodo;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport cx from \"classnames\";\nimport { toggleTodo } from \"../redux/actions\";\nimport { Center, Box } from \"@chakra-ui/react\";\n\nconst Todo = ({ todo, toggleTodo }) => (\n  <Center><Box><li className=\"todo-item\" onClick={() => toggleTodo(todo.id)}>\n    {todo && todo.completed ? \"ðŸ‘Œ\" : \"ðŸ‘‹\"}{\" \"}\n    <span\n      className={cx(\n        \"todo-item__text\",\n        todo && todo.completed && \"todo-item__text--completed\"\n      )}\n    >\n      {todo.content}\n    </span>\n  </li>\n  </Box>\n  </Center>\n);\n\n// export default Todo;\nexport default connect(\n  null,\n  { toggleTodo }\n)(Todo);\n","import { VISIBILITY_FILTERS } from \"../constants\";\n\nexport const getTodosState = store => store.todos;\n\nexport const getTodoList = store =>\n  getTodosState(store) ? getTodosState(store).allIds : [];\n\nexport const getTodoById = (store, id) =>\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\n\n/**\n * example of a slightly more complex selector\n * select from store combining information from multiple reducers\n */\nexport const getTodos = store =>\n  getTodoList(store).map(id => getTodoById(store, id));\n\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\n  const allTodos = getTodos(store);\n  switch (visibilityFilter) {\n    case VISIBILITY_FILTERS.COMPLETED:\n      return allTodos.filter(todo => todo.completed);\n    case VISIBILITY_FILTERS.INCOMPLETE:\n      return allTodos.filter(todo => !todo.completed);\n    case VISIBILITY_FILTERS.ALL:\n    default:\n      return allTodos;\n  }\n};\n\n\n\n/* export const getTodoList = store => \n    store && store.todos ? store.todos.allIds : [];\n\nexport const getTodoById = (store, id) => \n    store && store.todos && store.todos.byIds\n        ? { ...store.todos.byIds[id], id}\n        : {};\n/**\n * example of a slightly more complex selector\n * select from store combining information from multiple reducers\n */\n\n/*\nexport const getTodos = store => \n    getTodoList(store).map(id => getTodoById(store, id));\n */","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Todo from \"./Todo\";\n// import { getTodos } from \"../redux/selectors\";\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\n// eslint-disable-next-line no-unused-vars\nimport { VISIBILITY_FILTERS } from \"../constants\";\nimport { Center, Box } from \"@chakra-ui/react\";\n\n\nconst TodoList = ({ todos }) => (\n  <Center><Box>\n  <ul className=\"todo-list\">\n    {todos && todos.length\n      ? todos.map((todo, index) => {\n          return <Todo key={`todo-${todo.id}`} todo={todo} />;\n        })\n      : \"No todos, yay!\"}\n  </ul>\n  </Box>\n  </Center>\n);\n\n// const mapStateToProps = state => {\n//   const { byIds, allIds } = state.todos || {};\n//   const todos =\n//     allIds && state.todos.allIds.length\n//       ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))\n//       : null;\n//   return { todos };\n// };\n\nconst mapStateToProps = state => {\n  const { visibilityFilter } = state;\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter);\n  return { todos };\n  //   const allTodos = getTodos(state);\n  //   return {\n  //     todos:\n  //       visibilityFilter === VISIBILITY_FILTERS.ALL\n  //         ? allTodos\n  //         : visibilityFilter === VISIBILITY_FILTERS.COMPLETED\n  //           ? allTodos.filter(todo => todo.completed)\n  //           : allTodos.filter(todo => !todo.completed)\n  //   };\n};\n// export default TodoList;\nexport default connect(mapStateToProps)(TodoList);\n","import React from \"react\";\nimport cx from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { setFilter } from \"../redux/actions\";\nimport { VISIBILITY_FILTERS } from \"../constants\";\n\nconst VisibilityFilters = ({ activeFilter, setFilter }) => {\n  return (\n    <div className=\"visibility-filters\">\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\n        return (\n          <span\n            key={`visibility-filter-${currentFilter}`}\n            className={cx(\n              \"filter\",\n              currentFilter === activeFilter && \"filter--active\"\n            )}\n            onClick={() => {\n              setFilter(currentFilter);\n            }}\n          >\n            {currentFilter}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return { activeFilter: state.visibilityFilter };\n};\n// export default VisibilityFilters;\nexport default connect(\n  mapStateToProps,\n  { setFilter }\n)(VisibilityFilters);\n","import React from 'react';\nimport AddTodo from './components/AddTodo';\nimport TodoList from './components/TodoList';\nimport VisibilityFilters from './components/VisibilityFilters';\nimport \"./styles.css\";\nimport { Box } from \"@chakra-ui/react\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\n\nconst config = {\n    useSystemColorMode: false,\n    initialColorMode: \"dark\",\n    \n}\nconst customTheme=extendTheme({ config })\n\nfunction TodoApp(){\n    return (\n        <ChakraProvider theme={customTheme}>\n        <div className=\"todo-app\">\n            <Box width=\"100%\">\n                <h1>Todo List</h1>\n                    <AddTodo />\n                    <VisibilityFilters />\n\n                        <TodoList />\n            </Box>\n        </div>\n        </ChakraProvider>\n\n    );\n}\nexport default TodoApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// 1. importing `ChakraProvider` component\r\nimport { ChakraProvider, theme } from '@chakra-ui/react';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nimport TodoApp from \"./TodoApp\";\r\n\r\n// import { ColorModeScript } from '@chakra-ui/color-mode';\r\n\r\n\r\n\r\n// import './index.css';\r\n// // import App from './App';\r\n// import * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <ChakraProvider theme = {theme}>\r\n        {/*<ColorModeScript initialColorMode={theme.config.initialColorMode}> */}\r\n          <TodoApp/>\r\n       {/* </ColorModeScript> */}\r\n    </ChakraProvider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  rootElement\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}